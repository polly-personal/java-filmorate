package ru.yandex.practicum.filmorate.storage.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class ManagerDatabaseDao {
    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public ManagerDatabaseDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void createAllTabs() {
        String users = "create TABLE IF NOT EXISTS PUBLIC.\"users\"(\n" +
                "\tid BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "\temail VARCHAR(255) NOT NULL,\n" +
                "\tlogin VARCHAR(255) NOT NULL,\n" +
                "\tname VARCHAR(255),\n" +
                "\tbirthday DATE NOT NULL\n" +
                ");";
        jdbcTemplate.update(users);

        String friendships = "create TABLE IF NOT EXISTS PUBLIC.\"friendships\"(\n" +
                "\tuser_id BIGINT NOT NULL REFERENCES PUBLIC.\"users\"(id),\n" +
                "\tfriend_id BIGINT NOT NULL REFERENCES PUBLIC.\"users\"(id),\n" +
                "\tis_approved BOOLEAN\n" +
                ");";
        jdbcTemplate.update(friendships);

        String mpa = "create TABLE IF NOT EXISTS PUBLIC.\"mpa\" (\n" +
                "    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "    name          VARCHAR(10) NOT NULL UNIQUE\n" +
                ");";
        jdbcTemplate.update(mpa);

        String films = "create TABLE IF NOT EXISTS PUBLIC.\"films\"(\n" +
                "\tid BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "\tname VARCHAR(255) NOT NULL,\n" +
                "\tdescription VARCHAR(200),\n" +
                "\trelease_date DATE NOT NULL,\n" +
                "\tduration INTEGER NOT NULL,\n" +
                "\trate BIGINT,\n" +
                "\tmpa_id INTEGER REFERENCES PUBLIC.\"mpa\"(id)\n" +
                ");";
        jdbcTemplate.update(films);

        String likes = "create TABLE IF NOT EXISTS PUBLIC.\"likes\"(\n" +
                "\tfilm_id BIGINT NOT NULL REFERENCES PUBLIC.\"films\"(id),\n" +
                "\tuser_id BIGINT NOT NULL REFERENCES PUBLIC.\"users\"(id)\n" +
                ");";
        jdbcTemplate.update(likes);

        String genres = "create TABLE IF NOT EXISTS PUBLIC.\"genres\"(\n" +
                "\tid INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "\tname VARCHAR(255) NOT NULL UNIQUE\n" +
                ");";
        jdbcTemplate.update(genres);

        String filmGenres = "create TABLE IF NOT EXISTS PUBLIC.\"film_genres\"(\n" +
                "\tfilm_id BIGINT NOT NULL REFERENCES PUBLIC.\"films\"(id)  ON DELETE CASCADE,\n" +
                "\tgenre_id INTEGER NOT NULL REFERENCES PUBLIC.\"genres\"(id)\n" +
                ");";
        jdbcTemplate.update(filmGenres);

        String insertMpa = "MERGE INTO PUBLIC.\"mpa\" (id, name)\n" +
                "VALUES (1, 'G'),\n" +
                "       (2, 'PG'),\n" +
                "       (3, 'PG-13'),\n" +
                "       (4, 'R'),\n" +
                "       (5, 'NC-17');";
        jdbcTemplate.update(insertMpa);

        String insertGenre = "MERGE INTO PUBLIC.\"genres\" (id, name)\n" +
                "VALUES (1, 'Комедия'),\n" +
                "       (2, 'Драма'),\n" +
                "       (3, 'Мультфильм'),\n" +
                "       (4, 'Триллер'),\n" +
                "       (5, 'Документальный'),\n" +
                "       (6, 'Боевик');";
        jdbcTemplate.update(insertGenre);

    }

    public void deleteAllTabs() {
        deleteAllTabsAssociatedWithFilmTable();

        String deletionFriendshipSqlRequest = "DROP TABLE PUBLIC.\"friendships\"";
        String deletionUserSqlRequest = "DROP TABLE PUBLIC.\"users\"";

        jdbcTemplate.update(deletionFriendshipSqlRequest);
        jdbcTemplate.update(deletionUserSqlRequest);
    }

    public void deleteAllTabsAssociatedWithUserTable() {
        String deletionLikesSqlRequest = "DROP TABLE PUBLIC.\"likes\"";
        String deletionFriendshipSqlRequest = "DROP TABLE PUBLIC.\"friendships\"";
        String deletionUserSqlRequest = "DROP TABLE PUBLIC.\"users\"";

        jdbcTemplate.update(deletionLikesSqlRequest);
        jdbcTemplate.update(deletionFriendshipSqlRequest);
        jdbcTemplate.update(deletionUserSqlRequest);
    }

    public void deleteAllTabsAssociatedWithFilmTable() {
        String deletionLikesSqlRequest = "DROP TABLE PUBLIC.\"film_genres\"";
        String deletionFriendshipSqlRequest = "DROP TABLE PUBLIC.\"genres\"";
        String deletionLikeSqlRequest = "DROP TABLE PUBLIC.\"likes\"";
        String deletionFilmSqlRequest = "DROP TABLE PUBLIC.\"films\"";
        String deletionMpaSqlRequest = "DROP TABLE PUBLIC.\"mpa\"";

        jdbcTemplate.update(deletionLikesSqlRequest);
        jdbcTemplate.update(deletionFriendshipSqlRequest);
        jdbcTemplate.update(deletionLikeSqlRequest);
        jdbcTemplate.update(deletionFilmSqlRequest);
        jdbcTemplate.update(deletionMpaSqlRequest);
    }
}
