package ru.yandex.practicum.filmorate.storage.dao;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import ru.yandex.practicum.filmorate.exception.IdNotFoundException;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.Genre;
import ru.yandex.practicum.filmorate.model.Mpa;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
@DisplayName("GenreDaoTest –¥–æ–ª–∂–µ–Ω ")
class GenreDaoTest {
    private final GenreDao genreDao;
    private final FilmDao filmDao;

    @DisplayName("–≤—ã–¥–∞—Ç—å –∂–∞–Ω—Ä –ø–æ id")
    @Test
    public void getById() {
        Genre returnedGenre = genreDao.getById(1);
        assertEquals(1, returnedGenre.getId(), "id –∂–∞–Ω—Ä–∞ != 1");
        assertEquals("–ö–æ–º–µ–¥–∏—è", returnedGenre.getName(), "name –∂–∞–Ω—Ä–∞ –Ω–µ '–ö–æ–º–µ–¥–∏—è'");
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤")
    @Test
    public void getGenreList() {
        List<Genre> returnedGenreList = genreDao.getGenreList();
        assertEquals(6, returnedGenreList.size(), "size —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤ != 6");
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–∞ –ø–æ id —Ñ–∏–ª—å–º–∞")
    @Test
    public void getGenresByFilmId() {
        Genre genre = Genre.builder().id(1).name("–ö–æ–º–µ–¥–∏—è").build();
        Set<Genre> genres = new HashSet<>();
        genres.add(genre);

        Film returnedFilm = filmDao.createFilm(
                Film.builder()
                        .name("name")
                        .releaseDate(LocalDate.of(2010, 1, 1))
                        .duration(160)
                        .description("description")
                        .rate(1)
                        .mpa(Mpa.builder().id(1).name("G").build())
                        .genres(genres)
                        .build()
        );

        Set<Genre> returnedGenreSet = genreDao.getGenresByFilmId(returnedFilm.getId());
        assertEquals(1, returnedGenreSet.size(), "size —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤ != 1");
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º id")
    @Test
    public void idValidationWithNegativeId() {
        IdNotFoundException exception = assertThrows(
                IdNotFoundException.class,
                () -> genreDao.idValidation(-1)
        );

        assertEquals("üîπ–≤–∞—à id: -1 -- –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏–±–æ —Ä–∞–≤–µ–Ω 0", exception.getMessage());
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º id")
    @Test
    public void idValidationWithNonExistent() {
        IdNotFoundException exception = assertThrows(
                IdNotFoundException.class,
                () -> genreDao.idValidation(9999)
        );

        assertEquals("üîπ–≤–≤–µ–¥–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π id: 9999", exception.getMessage());
    }
}