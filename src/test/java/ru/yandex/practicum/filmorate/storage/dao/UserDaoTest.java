package ru.yandex.practicum.filmorate.storage.dao;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.jdbc.Sql;
import ru.yandex.practicum.filmorate.exception.IdNotFoundException;
import ru.yandex.practicum.filmorate.model.User;

import java.time.LocalDate;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
@Sql(scripts = {"/schema.sql", "/data.sql"}, executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD)
@Sql(scripts = "/delete_schema.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
@DisplayName("UserDaoTest –¥–æ–ª–∂–µ–Ω ")
class UserDaoTest {
    private final UserDao userDao;
    private User defaultUser;
    private User defaultFriend;

    @BeforeEach
    public void createDefaultUsers() {
        defaultUser = User.builder()
                .email("email@mail.ru")
                .login("login")
                .name("name")
                .birthday(LocalDate.of(2010, 1, 1))
                .build();

        defaultFriend = User.builder()
                .email("friend_email@mail.ru")
                .login("friend_login")
                .name("friend_name")
                .birthday(LocalDate.of(2011, 1, 1))
                .build();
    }

    @DisplayName("—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—Ç—å –µ–≥–æ –ø–æ –µ–≥–æ id")
    @Test
    public void createUserAndGetById() {
        User returnedUser = userDao.createUser(defaultUser);

        User returnedUserById = userDao.getById(returnedUser.getId());
        assertEquals(1, returnedUserById.getId(), "id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è != 1");
        assertEquals("email@mail.ru", returnedUserById.getEmail(), "email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è != email@mail.ru");
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    @Test
    public void getUsersList() {
        userDao.createUser(defaultUser);
        userDao.createUser(defaultFriend);

        List<User> returnedUsersList = userDao.getAllUsers();
        assertEquals(2, returnedUsersList.size(), "size —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π != 2");
    }

    @DisplayName("–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @Test
    public void updateUser() {
        User returnedUser = userDao.createUser(defaultUser);
        returnedUser.setEmail("updated_email@email.ru");
        User returnedUpdatedUser = userDao.updateUser(returnedUser);

        User returnedUserById = userDao.getById(returnedUpdatedUser.getId());
        assertEquals("updated_email@email.ru", returnedUserById.getEmail(), "email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è != \"updated_email@email.ru\"");
    }

    @DisplayName("—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ id")
    @Test
    public void deleteUser() {
        User returnedUser = userDao.createUser(defaultUser);
        userDao.deleteUser(returnedUser.getId());

        List<User> returnedUsersList = userDao.getAllUsers();
        assertEquals(0, returnedUsersList.size(), "size —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π != 0");
    }

    @DisplayName("–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–≥–∞, (—É \"–¥—Ä—É–≥–∞\" –Ω–µ—Ç –¥—Ä—É–≥–∞)")
    @Test
    public void addFriend() {
        User returnedUser = userDao.createUser(defaultUser);
        User returnedFriend = userDao.createUser(defaultFriend);
        userDao.addFriend(returnedUser.getId(), returnedFriend.getId());

        User returnedUserById = userDao.getById(returnedUser.getId());
        assertEquals(1, returnedUserById.getFriendsIds().size(), "size —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π != 1");

        User returnedFriendById = userDao.getById(returnedFriend.getId());
        assertEquals(0, returnedFriendById.getFriendsIds().size(), "size —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π != 0");
    }

    @DisplayName("—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–≥–∞")
    @Test
    public void deleteFriend() {
        User returnedUser = userDao.createUser(defaultUser);
        User returnedFriend = userDao.createUser(defaultFriend);
        userDao.addFriend(returnedUser.getId(), returnedFriend.getId());
        userDao.deleteFriend(returnedUser.getId(), returnedFriend.getId());

        User returnedUserById = userDao.getById(returnedUser.getId());
        assertEquals(0, returnedUserById.getFriendsIds().size(), "size —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π != 0");

        User returnedFriendById = userDao.getById(returnedFriend.getId());
        assertEquals(0, returnedFriendById.getFriendsIds().size(), "size —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π != 0");
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ id –¥—Ä—É–∑–µ–π –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @Test
    public void getFriends() {
        User returnedUser = userDao.createUser(defaultUser);
        User returnedFriend = userDao.createUser(defaultFriend);
        userDao.addFriend(returnedUser.getId(), returnedFriend.getId());

        User returnedUserById = userDao.getById(returnedUser.getId());
        assertEquals(1, returnedUserById.getFriendsIds().size(), "size —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π != 1");
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º id")
    @Test
    public void idValidationWithNegativeId() {
        IdNotFoundException exception = assertThrows(
                IdNotFoundException.class,
                () -> userDao.idValidation(-1)
        );

        assertEquals("üîπ–≤–∞—à id: -1 -- –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏–±–æ —Ä–∞–≤–µ–Ω 0", exception.getMessage());
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º id")
    @Test
    public void idValidationWithNonExistent() {
        IdNotFoundException exception = assertThrows(
                IdNotFoundException.class,
                () -> userDao.idValidation(9999)
        );

        assertEquals("üîπ–≤–≤–µ–¥–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π id: 9999", exception.getMessage());
    }
}