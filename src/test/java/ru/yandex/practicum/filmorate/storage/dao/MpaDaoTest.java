package ru.yandex.practicum.filmorate.storage.dao;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import ru.yandex.practicum.filmorate.exception.IdNotFoundException;
import ru.yandex.practicum.filmorate.model.Mpa;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
@DisplayName("MpaDaoTest –¥–æ–ª–∂–µ–Ω ")
class MpaDaoTest {
    private final MpaDao mpaDao;

    @DisplayName("–≤—ã–¥–∞—Ç—å mpa-—Ä–µ–π—Ç–∏–Ω–≥ –ø–æ id")
    @Test
    public void getById() {
        Mpa returnedMpa = mpaDao.getById(1);
        assertEquals(1, returnedMpa.getId(), "id mpa-—Ä–µ–π—Ç–∏–Ω–≥–∞ != 1");
        assertEquals("G", returnedMpa.getName(), "name mpa-—Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–µ 'G'");
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö mpa-—Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
    @Test
    public void getMpaList() {
        List<Mpa> returnedMpaList = mpaDao.getMpaList();
        assertEquals(5, returnedMpaList.size(), "size —Å–ø–∏—Å–∫–∞ mpa-—Ä–µ–π—Ç–∏–Ω–≥–æ–≤ != 5");
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º id")
    @Test
    public void idValidationWithNegativeId() {
        IdNotFoundException exception = assertThrows(
                IdNotFoundException.class,
                () -> mpaDao.idValidation(-1)
        );

        assertEquals("üîπ–≤–∞—à id: -1 -- –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏–±–æ —Ä–∞–≤–µ–Ω 0", exception.getMessage());
    }

    @DisplayName("–≤—ã–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º id")
    @Test
    public void idValidationWithNonExistent() {
        IdNotFoundException exception = assertThrows(
                IdNotFoundException.class,
                () -> mpaDao.idValidation(9999)
        );

        assertEquals("üîπ–≤–≤–µ–¥–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π id: 9999", exception.getMessage());
    }
}